app:
  title: D&I Service Registry
  baseUrl: http://localhost:3000

organization:
  name: Tyler Technologies - D&I

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  database:
    # config options: https://node-postgres.com/apis/client
    client: pg
    pluginDivisionMode: schema # plugins get their own schema
    connection:
      database: "service_registry"
      host: localhost
      port: 5432
      user: "service_registry_db_user"
      password: ${PG_PASSWORD}

integrations:
  github:
    - host: github.com
      apps:
        - $include: github-app-socrata-backstage-credentials.yaml

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'local' # Alternatives - 'docker'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'

auth: # see https://backstage.io/docs/auth/ to learn about auth providers
  environment: development
  providers:
    okta:
      development:
        clientId: ${AUTH_OKTA_CLIENT_ID}
        clientSecret: ${AUTH_OKTA_CLIENT_SECRET}
        audience: 'https://socrata.okta.com'
        signIn:
          resolvers:
            - resolver: emailMatchingUserEntityProfileEmail

# see https://backstage.io/docs/features/software-templates/configuration for software template options
scaffolder:

# see https://backstage.io/docs/features/software-catalog/configuration
catalog:
  stitchingStrategy:
    mode: immediate
  orphanStrategy: delete
  # readonly: true # TODO - this maybe be worthwhile, since I don't think we're creating/updating/deleting
  providers:
    #githubOrg: # config for getting users/teams into the catalog
    #  id: socrata
    #  githubUrl: https://github.com
    #  orgs: ['socrata'] # TODO - cookbooks and platform
    #  schedule:
    #    initialDelay: { seconds: 10 }
    #    frequency: { hours: 1 }
    #    timeout: { minutes: 50 }
    github: # config for getting repository information into the catalog
      socrata:
        organization: 'socrata'
        catalogPath: '/**/service-registry.yaml'
        schedule:
          frequency: { minutes: 30 }
          timeout: { minutes: 25 }
    microsoftGraphOrg:
      default:
        tenantId: ${AZURE_TENANT_ID}
        clientId: ${AZURE_CLIENT_ID}
        clientSecret: ${AZURE_CLIENT_SECRET}
        user:
          expand: manager
        group: # filter to just the teams we care about
          includeSubGroups: true
          filter: >
            mail eq 'DI-all-employees@tylertech.com' OR
            mail eq 'DI-EnterpriseExperienceUS@tylertech.onmicrosoft.com' OR
            mail eq 'di-interactive-reporting@tylertech.onmicrosoft.com' OR
            mail eq 'DI-ReportingPH@tylertech.onmicrosoft.com' OR
            mail eq 'di-ai-team@tylertech.onmicrosoft.com' OR
            mail eq 'di-eagle@tylertech.onmicrosoft.com' OR
            mail eq 'DIIngressQueries@tylertech.onmicrosoft.com' OR
            mail eq 'access-control-team@tylertech.onmicrosoft.com' OR
            mail eq 'DITire@tylertech.onmicrosoft.com' OR
            mail eq 'DandIEventing@tylertech.onmicrosoft.com' OR
            mail eq 'di-security-internal@tylertech.com'
        userGroupMember:
          filter: "id eq '42a286ac-820c-4f35-90ee-cfbdcceca658'" # DI-all-employees@tylertech.com
        schedule:
          frequency: PT1H
          timeout: PT50M
  import: # for the import plugin: https://github.com/backstage/backstage/tree/master/plugins/catalog-import
    entityFilename: service-registry.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations: # file locations are relative to the backend process (`packages/backend`)
    - type: file
      target: ../../catalog-info/entities.yaml
    - type: file
      target: ../../catalog-info/template/template.yaml
      rules:
        - allow: [Template]
    - type: file
      target: ../../catalog-info/org.yaml
      rules:
        - allow: [User, Group]

# see https://backstage.io/docs/permissions/getting-started
permission:
  enabled: true

#events:
#  http:
#    topics:
#      - github
#  modules:
#    github:
#      webhookSecret: ${GITHUB_WORKFLOW_SECRET}
